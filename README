Copyright (c) 2009,2010 Dennis Kaarsemaker <dennis@kaarsemaker.net>
Small piece of middleware to be able to access authentication data from
everywhere in the django code.

How often do you want to access authentication information in a model's save()
method or other places where this is not easily available? In my case very
often so I wrote a small piece of middleware to make this information always
available.

Install: python setup.py install
Usage: 
- Add 'echelon' to INSTALLED_APPS 
- Add 'echelon.middleware.EchelonMiddleware' to MIDDLEWARE_CLASSES after the
  authentication and session middleware

To set/get the user info, there is the following API:

from echelon.middleware import EchelonMiddleware

EchelonMiddleware.set_user(some_user)        # This will set the current user for this thread to some_user
user = EchelonMiddleware.get_user()          # This will return None if there is no current user
user = EchelonMiddleware.get_user(some_user) # This will return some_user if there is no current user
EchelonMiddleware.del_user()                 # It is always safe to call this, even if there is no current user

The middleware automatically sets/deletes the current user for HTTP requests.
For other uses (management commands, scripts), you will need to do this
yourself.

echelon also provides a CurrentUserField, which can be used for auditing
purposes. Use it as follows:

from echelon.fields import CurrentUserField

class MyModel(models.Model):
    ....
    creator = CurrentUserField(add_only=True, related_name="created_mymodels")
    last_editor = CurrentUserField(related_name="last_edited_mymodels")
    ...

If your objects can be edited by anonymous users, you must make sure you pass
blank=True and null=True to the fields constructor. This field is a ForeignKey
to the django.contrib.auth.models.User model and you can treat it as such.
